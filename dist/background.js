(()=>{"use strict";let e=!1,o=!1,n=!1,t=null,a=null,r=null;async function i(){console.log("🤖 ALRA: Checking for Chrome AI APIs in service worker...");try{if("undefined"!=typeof self&&"ai"in self){const i=self.ai;if("summarizer"in i){const e=await i.summarizer.capabilities();console.log("📊 ALRA: Summarizer capabilities:",e),"readily"===e.available?(a=await i.summarizer.create({type:"key-points",format:"markdown",length:"medium"}),o=!0,console.log("✅ ALRA: Summarizer API initialized successfully")):console.log(`⏳ ALRA: Summarizer status: ${e.available}`)}else console.log("⚠️ ALRA: summarizer not in ai namespace");if("languageModel"in i){const o=await i.languageModel.capabilities();console.log("🧠 ALRA: Language Model capabilities:",o),"readily"===o.available?(t=await i.languageModel.create(),e=!0,console.log("✅ ALRA: Gemini Nano initialized successfully")):console.log(`⏳ ALRA: Language Model status: ${o.available}`)}else console.log("⚠️ ALRA: languageModel not in ai namespace");if("rewriter"in i){const e=await i.rewriter.capabilities();console.log("✍️ ALRA: Rewriter capabilities:",e),"readily"===e.available?(r=await i.rewriter.create(),n=!0,console.log("✅ ALRA: Writer API initialized successfully")):console.log(`⏳ ALRA: Writer status: ${e.available}`)}else console.log("⚠️ ALRA: rewriter not in ai namespace")}else console.log("⚠️ ALRA: window.ai not available in service worker")}catch(e){console.error("❌ ALRA: AI API initialization error:",e)}console.log("═══════════════════════════════════════════════════════════════"),console.log("🧠 ALRA: AI APIs Status Report (Service Worker):"),console.log("   Gemini Nano: "+(e?"✅ Ready":"❌ Not available")),console.log("   Summarizer:  "+(o?"✅ Ready":"❌ Not available")),console.log("   Writer:      "+(n?"✅ Ready":"❌ Not available")),console.log("═══════════════════════════════════════════════════════════════"),e||o||n||(console.log("ℹ️ ALRA: Using fallback implementations (extractive summarization, heuristic nudges)"),console.log("ℹ️ ALRA: For Chrome AI APIs to work:"),console.log("   1. Use Chrome Canary"),console.log("   2. Enable flags in chrome://flags/"),console.log("   3. Ensure Gemini Nano model is downloaded"))}const s={pageOptimizationEnabled:!0,summarizationEnabled:!0,predictionsEnabled:!0,nudgesEnabled:!0,metricsTrackingEnabled:!0,privacyMode:!0},l={tabsPredictedCorrectly:0,timeSavedSeconds:0,clicksReduced:0,articlesSummarized:0,tasksCompleted:0,avgReadingTimeReduction:0};let c=[],g=null,u=Date.now();chrome.tabs.onActivated.addListener(e=>{!async function(e){if(g===e)return;const o=Math.floor((Date.now()-u)/1e3);if(null!==g)try{const e=await chrome.tabs.get(g),n={tabId:g,url:e.url||"unknown",title:e.title||"unknown",timestamp:Date.now(),durationOnTab:o,sequence:c.length+1};c.push(n),c.length>100&&(c=c.slice(-100)),await chrome.storage.local.set({browsing_history:c})}catch(e){console.warn("ALRA: Could not log tab transition",e)}g=e,u=Date.now()}(e.tabId)}),chrome.tabs.onUpdated.addListener((e,o,n)=>{"complete"===o.status&&chrome.tabs.sendMessage(e,{action:"PAGE_LOADED",url:n.url,title:n.title},e=>{chrome.runtime.lastError&&console.warn("ALRA: Could not send message to content script",chrome.runtime.lastError)})}),chrome.runtime.onMessage.addListener((r,i,g)=>"GET_PREFERENCES"===r.action?(chrome.storage.local.get("preferences",e=>{const o=e.preferences||s;g(o)}),!0):"GET_AI_STATUS"===r.action?(g({geminiNano:e,summarizer:o,writer:n}),!0):"SUMMARIZE_CONTENT"===r.action?(async function(e){if(!o||!a)return"Summarizer not available. Please try again or enable it in settings.";try{const o=await a.summarize(e);return console.log("✅ ALRA: Content summarized successfully"),o}catch(e){return console.error("❌ ALRA: Summarization failed:",e),"Could not summarize content."}}(r.text).then(e=>{g({success:!0,summary:e})}),!0):"GET_NUDGES"===r.action?(async function(o,n){if(!e||!t)return[];try{const e=`\nYou are ALRA, a browsing assistant. Analyze this user context and suggest 2-3 brief actionable nudges.\n\nCurrent URL: ${o}\nRecent browsing history:\n${n.slice(-5).map(e=>`- ${e.title} (${Math.round(e.durationOnTab/60)} min)`).join("\n")}\n\nGenerate 2-3 ultra-brief nudges (max 12 words each) as a JSON array:\n["nudge1", "nudge2", "nudge3"]\n\nOnly respond with the JSON array, nothing else.\n    `,a=await t.prompt(e);try{const e=JSON.parse(a);return console.log("✅ ALRA: Generated action nudges:",e),Array.isArray(e)?e:[]}catch{return console.warn("⚠️ ALRA: Could not parse nudges response:",a),[]}}catch(e){return console.error("❌ ALRA: Nudge generation failed:",e),[]}}(r.url,c).then(e=>{g({success:!0,nudges:e})}),!0):"PREDICT_NEXT_ACTION"===r.action?(async function(o){if(!e||!t||o.length<3)return null;try{const e=`\nAnalyze this browsing sequence and predict what the user will search for or visit next.\nRecent tabs: ${o.slice(-10).map(e=>e.title).join(" -> ")}\n\nPredict the ONE most likely next action in 3-5 words. Respond with ONLY the prediction, nothing else.\n    `,n=await t.prompt(e);return console.log("🔮 ALRA: Predicted next tab:",n),n.trim()}catch(e){return console.error("❌ ALRA: Prediction failed:",e),null}}(c).then(e=>{g({success:!0,prediction:e})}),!0):"GET_BROWSING_HISTORY"===r.action?(g(c),!0):"SYNC_TABS"===r.action?(console.log("📱 ALRA Background: Syncing recommended tabs...",r.tabs),chrome.storage.sync.set({alra_recommended_tabs:{tabs:r.tabs,timestamp:Date.now()}}),g({success:!0}),!0):"ADD_BOOKMARK"===r.action?(console.log("📚 ALRA Background: Adding bookmark...",r.url),chrome.bookmarks.create({title:r.title||"ALRA Bookmark",url:r.url},e=>{chrome.runtime.lastError?g({success:!1,error:chrome.runtime.lastError.message}):(console.log("✅ ALRA: Bookmark created successfully"),g({success:!0,bookmark:e}))}),!0):"UPDATE_METRICS"===r.action?(chrome.storage.local.get("metrics",e=>{let o=e.metrics||l;o={...o,...r.data},chrome.storage.local.set({metrics:o}),g({success:!0})}),!0):"LOG_PREDICTION"===r.action?(console.log("🔮 ALRA: Prediction logged",r.data),!0):void 0),chrome.runtime.onInstalled.addListener(e=>{"install"===e.reason?(console.log("🧠 ALRA Initialized - Welcome to smarter browsing!"),console.log("📋 ALRA Phase 1: Foundation Setup Complete"),console.log("   ✅ Tab tracking system ready"),console.log("   ✅ Chrome Storage API connected"),console.log("   ✅ Message handlers listening"),console.log("   ⏳ Initializing Chrome AI APIs..."),chrome.storage.local.set({preferences:s,metrics:l,browsing_history:[],installation_time:Date.now()}),i(),chrome.tabs.create({url:chrome.runtime.getURL("popup.html")})):"update"===e.reason&&(console.log("📦 ALRA Updated! Reinitializing AI APIs..."),i())}),async function(){try{console.log("🚀 ALRA: Starting service worker initialization...");const e=await chrome.storage.local.get(["browsing_history","preferences","metrics"]);c=e.browsing_history||[],console.log("📚 ALRA: Loaded browsing history with",c.length,"entries"),console.log("✅ ALRA: Chrome Storage API initialized"),await i(),console.log("✨ ALRA: Service worker ready!")}catch(e){console.error("❌ ALRA: Error initializing",e)}}()})();