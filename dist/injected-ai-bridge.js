(()=>{"use strict";!function(){if(console.log("üåâ ALRA AI Bridge: Injected into page context"),console.log("üîç window.ai available:","ai"in window),!("ai"in window))return console.log("‚ö†Ô∏è ALRA AI Bridge: window.ai not available on this page"),void window.addEventListener("message",e=>{"ALRA_AI_REQUEST"===e.data?.type&&"CHECK_AVAILABILITY"===e.data?.action&&window.postMessage({type:"ALRA_AI_RESPONSE",id:e.data.id,result:"unavailable",error:null},"*")});const e="Summarizer"in self,a="Proofreader"in self,o=window.ai;console.log("‚úÖ ALRA AI Bridge: window.ai found! Initializing..."),console.log("üìã Summarizer API available:",e),console.log("üìù Proofreader API available:",a),window.addEventListener("message",async i=>{if("ALRA_AI_REQUEST"!==i.data?.type)return;const{action:t,data:r,id:l}=i.data;console.log(`üì® ALRA AI Bridge: Received request ${t}`);try{let i=null;if("CHECK_AVAILABILITY"===t)i="available",console.log("‚úÖ ALRA AI Bridge: AI is available");else if("SUMMARIZE"===t)if(e){const e=self.Summarizer;if("unavailable"===await e.availability())throw new Error("Summarizer API is not available");const a=await e.create({type:"key-points",format:"markdown",length:"medium",monitor(e){e.addEventListener("downloadprogress",e=>{console.log(`Summarizer downloaded ${100*e.loaded}%`)})}});i=await a.summarize(r.text),console.log("‚úÖ ALRA AI Bridge: Summarization complete (Summarizer API)")}else{if(!("summarizer"in o))throw new Error("No summarizer available");{const e=await o.summarizer.create({type:"key-points",format:"markdown",length:"medium"});i=await e.summarize(r.text),console.log("‚úÖ ALRA AI Bridge: Summarization complete (legacy API)")}}else if("GENERATE_TEXT"===t){const e=await o.languageModel.create();i=await e.prompt(r.prompt),console.log("‚úÖ ALRA AI Bridge: Text generation complete")}else if("WRITE"===t)if("writer"in o){const e=await o.writer.create({tone:r.tone||"casual",length:r.length||"short"});i=await e.write(r.prompt),console.log("‚úÖ ALRA AI Bridge: Writing complete")}else{const e=await o.languageModel.create();i=await e.prompt(r.prompt),console.log("‚úÖ ALRA AI Bridge: Writing complete (via language model)")}else if("REWRITE"===t){const e=await o.rewriter.create();i=await e.rewrite(r.text),console.log("‚úÖ ALRA AI Bridge: Rewriting complete")}else if("ANALYZE_IMAGE"===t){if(!("languageModel"in o))throw new Error("Multimodal Prompt API not available");{const e=await o.languageModel.create({systemPrompt:"You are an expert at analyzing images and providing detailed descriptions."}),a=r.image;i=await e.prompt(r.prompt,{image:a}),console.log("‚úÖ ALRA AI Bridge: Image analysis complete")}}else if("ANALYZE_VIDEO"===t){if(!("languageModel"in o))throw new Error("Language Model not available");{const e=await o.languageModel.create();i=await e.prompt(r.prompt+"\n\n"+r.context),console.log("‚úÖ ALRA AI Bridge: Video analysis complete")}}else if("PROOFREAD"===t)if(a){const e=self.Proofreader;if("unavailable"===await e.availability()){if(!("languageModel"in o))throw new Error("No proofreading available");{const e=await o.languageModel.create();i=await e.prompt(`Proofread and correct this text:\n\n${r.text}`),console.log("‚úÖ ALRA AI Bridge: Proofreading complete (language model fallback)")}}else{const a=await e.create({expectedInputLanguages:["en"],monitor(e){e.addEventListener("downloadprogress",e=>{console.log(`Proofreader downloaded ${100*e.loaded}%`)})}});i=(await a.proofread(r.text)).corrected,console.log("‚úÖ ALRA AI Bridge: Proofreading complete (Proofreader API)")}}else{if(!("languageModel"in o))throw new Error("Proofreading not available");{const e=await o.languageModel.create();i=await e.prompt(`Proofread and correct this text:\n\n${r.text}`),console.log("‚úÖ ALRA AI Bridge: Proofreading complete (language model)")}}else if("TRANSLATE"===t)if("translator"in o){const e=await o.translator.create({sourceLanguage:"en",targetLanguage:r.targetLang.toLowerCase()});i=await e.translate(r.text),console.log("‚úÖ ALRA AI Bridge: Translation complete (native API)")}else{if(!("languageModel"in o))throw new Error("Translation not available");{const e=await o.languageModel.create();i=await e.prompt(r.prompt),console.log("‚úÖ ALRA AI Bridge: Translation complete (language model)")}}else if("CHECK_CAPABILITIES"===t){const e={};if("summarizer"in o)try{const a=await o.summarizer.capabilities();e.summarizer=a.available}catch(a){e.summarizer="no"}if("languageModel"in o)try{const a=await o.languageModel.capabilities();e.languageModel=a.available}catch(a){e.languageModel="no"}if("writer"in o)try{const a=await o.writer.capabilities();e.writer=a.available}catch(a){e.writer="no"}if("rewriter"in o)try{const a=await o.rewriter.capabilities();e.rewriter=a.available}catch(a){e.rewriter="no"}i=e,console.log("‚úÖ ALRA AI Bridge: Capabilities checked",e)}window.postMessage({type:"ALRA_AI_RESPONSE",id:l,result:i,error:null},"*")}catch(e){console.error("‚ùå ALRA AI Bridge: Error processing request",e),window.postMessage({type:"ALRA_AI_RESPONSE",id:l,result:null,error:String(e)},"*")}}),console.log("‚úÖ ALRA AI Bridge: Ready and listening for requests")}()})();