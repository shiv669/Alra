(()=>{"use strict";!function(){if(console.log("üåâ ALRA AI Bridge: Injected into page context"),console.log("üîç window.ai available:","ai"in window),!("ai"in window))return void console.log("‚ö†Ô∏è ALRA AI Bridge: window.ai not available on this page");const e=window.ai;console.log("‚úÖ ALRA AI Bridge: window.ai found! Initializing..."),window.addEventListener("ALRA_AI_REQUEST",async a=>{const{action:t,data:o,requestId:i}=a.detail;console.log(`üì® ALRA AI Bridge: Received request ${t}`);try{let a=null;if("SUMMARIZE"===t){const t=await e.summarizer.create({type:"key-points",format:"markdown",length:"medium"});a=await t.summarize(o.text),console.log("‚úÖ ALRA AI Bridge: Summarization complete")}else if("GENERATE_TEXT"===t){const t=await e.languageModel.create();a=await t.prompt(o.prompt),console.log("‚úÖ ALRA AI Bridge: Text generation complete")}else if("WRITE"===t)if("writer"in e){const t=await e.writer.create({tone:o.tone||"casual",length:o.length||"short"});a=await t.write(o.prompt),console.log("‚úÖ ALRA AI Bridge: Writing complete")}else{const t=await e.languageModel.create();a=await t.prompt(o.prompt),console.log("‚úÖ ALRA AI Bridge: Writing complete (via language model)")}else if("REWRITE"===t){const t=await e.rewriter.create();a=await t.rewrite(o.text),console.log("‚úÖ ALRA AI Bridge: Rewriting complete")}else if("ANALYZE_IMAGE"===t){if(!("languageModel"in e))throw new Error("Multimodal Prompt API not available");{const t=await e.languageModel.create({systemPrompt:"You are an expert at analyzing images and providing detailed descriptions."}),i=o.image;a=await t.prompt(o.prompt,{image:i}),console.log("‚úÖ ALRA AI Bridge: Image analysis complete")}}else if("ANALYZE_VIDEO"===t){if(!("languageModel"in e))throw new Error("Language Model not available");{const t=await e.languageModel.create();a=await t.prompt(o.prompt+"\n\n"+o.context),console.log("‚úÖ ALRA AI Bridge: Video analysis complete")}}else if("PROOFREAD"===t)if("proofreader"in e){const t=await e.proofreader.create();a=await t.proofread(o.text),console.log("‚úÖ ALRA AI Bridge: Proofreading complete (native API)")}else{if(!("languageModel"in e))throw new Error("Proofreading not available");{const t=await e.languageModel.create();a=await t.prompt(o.prompt),console.log("‚úÖ ALRA AI Bridge: Proofreading complete (language model)")}}else if("TRANSLATE"===t)if("translator"in e){const t=await e.translator.create({sourceLanguage:"en",targetLanguage:o.targetLang.toLowerCase()});a=await t.translate(o.text),console.log("‚úÖ ALRA AI Bridge: Translation complete (native API)")}else{if(!("languageModel"in e))throw new Error("Translation not available");{const t=await e.languageModel.create();a=await t.prompt(o.prompt),console.log("‚úÖ ALRA AI Bridge: Translation complete (language model)")}}else if("CHECK_CAPABILITIES"===t){const t={};if("summarizer"in e)try{const a=await e.summarizer.capabilities();t.summarizer=a.available}catch(e){t.summarizer="no"}if("languageModel"in e)try{const a=await e.languageModel.capabilities();t.languageModel=a.available}catch(e){t.languageModel="no"}if("writer"in e)try{const a=await e.writer.capabilities();t.writer=a.available}catch(e){t.writer="no"}if("rewriter"in e)try{const a=await e.rewriter.capabilities();t.rewriter=a.available}catch(e){t.rewriter="no"}a=t,console.log("‚úÖ ALRA AI Bridge: Capabilities checked",t)}window.dispatchEvent(new CustomEvent("ALRA_AI_RESPONSE",{detail:{requestId:i,success:!0,result:a}}))}catch(e){console.error("‚ùå ALRA AI Bridge: Error processing request",e),window.dispatchEvent(new CustomEvent("ALRA_AI_RESPONSE",{detail:{requestId:i,success:!1,error:String(e)}}))}}),window.dispatchEvent(new CustomEvent("ALRA_AI_BRIDGE_READY")),console.log("‚úÖ ALRA AI Bridge: Ready and listening for requests")}()})();